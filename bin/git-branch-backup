#! /usr/bin/env zsh

: ${BACKUP_BRANCH_FMT:='%1$s.backup%2$s'}

function backup_branch_name {
  printf $BACKUP_BRANCH_FMT "$@"
}

function highest_backup_id {
    local branch="${1}"
    [[ "${branch}" == "" ]] && return 1

    # lb_prefix: local branch prefix
    local lb_prefix="refs/heads/"

    local match="^${lb_prefix}$(backup_branch_name "${branch}" '[0-9]+')$"
    local sed_match=$(backup_branch_name ${branch} '\([0-9]\+\)')
    # Note: need to use sed delimiter that is illegal within branch name to prevent sed interpreting
    # the character within branch name as the delimiter causing things like
    # sed: -e expression #1, char 21: unknown option to `s'
    local sed_expr="s:^${lb_prefix}${sed_match}$:\1:"

    git for-each-ref --format="%(refname)" "refs/heads" \
        | grep -P "$match" \
        | sed "${sed_expr}" \
        | sort -nr \
        | head -n1
}

function new_backup_id {
    local branch="${1}"
    local highest=$(highest_backup_id "${branch}") || return
    echo $(( $highest + 1 ))
}

function main {
    local branch id
    branch=$(git rev-parse --abbrev-ref HEAD) || return

    if [[ "${branch}" == "HEAD" ]] ; then
        echo "There is no branch on HEAD" >&2
        return 1
    fi

    if [[ ${branch} =~ ^.*\.backup[0-9]{1,}$ ]]; then
        echo "HEAD is already a backup" >&2
        return 1
    fi

    id=$(new_backup_id "${branch}") || return

    local backup=$(backup_branch_name "${branch}" "${id}")
    git branch "${backup}" || return
    echo "Created backup branch '${backup}'"
}

main
